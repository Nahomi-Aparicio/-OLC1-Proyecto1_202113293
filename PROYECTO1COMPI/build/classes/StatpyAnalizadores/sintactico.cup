// ------------  Paquete e importaciones ------------
package StatpyAnalizadores;

import java_cup.runtime.*;
import Graficas.GraficarBarras;
import Graficas.GraficaPie;
import java.util.ArrayList;
import java.util.Map;

//------> Codigo para el parser
//------> Declaracion de variables, funciones y funciones de error

parser code 
{:
    public String resultado = ""; 

    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
    }

    //metodo para la tabilacion de los if -------------------------->
    public String indent(String text, int tabs) {
        String[] lines = text.split("\n");
        StringBuilder result = new StringBuilder();
        String tabPrefix = "";
        for (int i = 0; i < tabs; i++) {
            tabPrefix += "\t";
        }
        for (String line : lines) {
            result.append(tabPrefix).append(line).append("\n");
        }
        return result.toString();

    }


public Object datos(String archivos, String variable) {
    System.out.println(archivos);
    System.out.println(variable);

    String archivo = archivos.replace("\"", "");
    String variables = variable.replace("\"", "");
    Object valor = null; // Inicializar valor como un Object

    // Verificar si el archivo externo existe en el mapa
    if (funciones.maps.Archivos_Json.containsKey(archivo)) {
        // Obtener el objeto del archivo externo
        Object archivoJson = funciones.maps.Archivos_Json.get(archivo);

        // Verificar si el objeto es un mapa antes de acceder a sus claves
        if (archivoJson instanceof Map) {
            // Convertir el objeto a un mapa
            Map<?, ?> mapaInterno = (Map<?, ?>) archivoJson;

            // Verificar si la variable interna existe en el mapa
            if (mapaInterno.containsKey(variables)) {
                valor = mapaInterno.get(variables);
                System.out.println("Valor encontrado en el archivo '" + archivo + "': " + valor);
            } else {
                System.out.println("La clave '" + variables + "' no se encontró en el nivel interno del archivo '" + archivo + "'.");
            }
        } else {
            System.out.println("El archivo '" + archivo + "' no contiene un mapa interno válido.");
        }
    } else {
        System.out.println("La clave '" + archivo + "' no se encontró en el nivel externo.");
    }

    return valor;
}





 public Object datosejex(String variable) {
System.out.println("entra datosejex"+variable);
    String variables = variable;
    Object valor = ""; // Inicializar valor como un Object

        if (funciones.maps.Globales_tabla.containsKey(variables)) {
            valor = funciones.maps.Globales_tabla.get(variables);
            System.out.println("Valor encontrado en : " + valor);
        } else {
            System.out.println("La clave " + variables + " no se encontró en el nivel interno en globales.");
        }
    return valor;
}






    public GraficarBarras gb = new GraficarBarras();
public GraficaPie gP = new GraficaPie();
    private ArrayList<Double> Values = new ArrayList<Double>();
    private ArrayList<String> ValuesX = new ArrayList<String>();
    String titulo;
    String titulox;
    String tituloy;

:}


//------> Codigo para las acciones gramaticales (no tocar)
action code
{:  :}


//------> Declaración de terminales
terminal String ENTERO,PARENTESIS_A,PARENTESIS_C,LLAVE_A,LLAVE_C,PUNTO_COMA,DOSP,COMA,CORCHETE_A,
CORCHETE_C,DOLAR,IGUAL,MAS,MENOS,POR,DIV,MAYOR,MENOR,M_IGUAL,ENOR_IGUAL,
IGUALIGUAL,DIFERENTE,AND,OR,NOT,VOID,INT,DOUBLE,CHAR,BOOL,STRING,MAIN,IF,MASMAS,MENOSMENOS,
ELSE,SWITCH,BREAK,FOR,WHILE,CONSOL,DEFAULT,CASE,DO,VAR,DECIMAL,TRUE,FALSE,CHARI,GLOBALES,
ID,CADENA,NUEVOVALOR,BARRAS,PIE,TITULOY,TITULOX,EJEX,TITULO,VALORES;


//------> Declaración de no terminales

non terminal inicio,lista_Inst,instruccion,declaracionVar,
datoint,vari,unswitch,uncaso,otrocaso,casodefalut,undo,unaexpmas,
ifif,unif,unelse,elsee,imprimir,elstring,operadores,relacion,logico,unwhile,unacadena,
unfor,datofor,unosfor,relacionFor,unaexpmasfor,buscardato;


//---------TERMINALES PARA LAS GRAFICAS
non terminal globo,unglobo,otroglobo,datoglo,respuestaglo,dentrollaveglo;

non terminal unabarra,otrabarra,lagrafa,eldato,ejexdatos,otrovalor,valores,dentrootrovalor ;


//------> PRECEDENCIA
precedence left MASMAS,MENOSMENOS;
precedence left MAS,MENOS,POR,DIV;

precedence left AND, OR, NOT;
precedence left MAYOR, MENOR ,M_IGUAL,ENOR_IGUAL, IGUALIGUAL, DIFERENTE;



//------> Definir Simbolo Inicial
start with inicio; 

//-;System.out.println(a);
//FALTA LOS BREAK EN LOS IF  Y WHILE y el valor del switch  preguntar al aux de lo de el b++

inicio ::=  VOID MAIN  PARENTESIS_A PARENTESIS_C LLAVE_A lista_Inst:a  LLAVE_C    
 {:funciones.Traduccion.TraduccionPy.add("def main (): \n" +a.toString() + "if__name__ = \"__main__\": \n main()" + "\n");:}   
        ;

lista_Inst::= instruccion:a lista_Inst:b      {:RESULT = a +""+ b ; :}  
            |instruccion:a                        {:RESULT=a;:}
        ;
instruccion::= declaracionVar:a      {:RESULT=a+"\n";:}           
            |ifif:a                  {:RESULT=a+"\n";:}
            |imprimir:a              {:RESULT=a+"\n";:}               
            |unwhile:a               {:RESULT=a+"\n";:} 
            |unswitch:a              {:RESULT=a+"\n";:}
            |undo:a                  {:RESULT=a+"\n";:}
            |unaexpmas:a             {:RESULT=a+"\n";:}
            |unfor:a                 {:RESULT=a+"\n";:}
            |globo                   {:RESULT="";:}
            |unabarra                 {:RESULT="";:}
            |BREAK PUNTO_COMA          {:RESULT="break";:} 
            
;


//--------------------------DECLARACION DE VARIABLES -------------------------------------> 
declaracionVar::=datoint:a          {:RESULT=a;:}
            
        ;

datoint::= vari ID:a IGUAL operadores:b  PUNTO_COMA   {:RESULT=" "+a+"="+b;:}          
        |vari ID:a PUNTO_COMA                        {:RESULT=" "+a+"=NONE";:} 
        |ID:b IGUAL operadores:a PUNTO_COMA                  {:RESULT=b+" ="+a;:}
        
        
;

vari::=INT:a                         {:RESULT=a;:}  
        |DOUBLE:a                    {:RESULT=a;:} 
        |CHAR:a                      {:RESULT=a;:} 
        |BOOL:a                      {:RESULT=a;:}
        |STRING:a                    {:RESULT=a;:}
        |VAR:a                       {:RESULT=a;:}
    ;


unaexpmas::=ID:a MASMAS PUNTO_COMA              {:RESULT=a+"++";:}
        |ID:a MENOSMENOS PUNTO_COMA             {:RESULT=a+"--";:}
        ;




//--------------------------IMPRIMIR -------------------------------------> 
imprimir::=CONSOL PARENTESIS_A  operadores:a PARENTESIS_C PUNTO_COMA     {:RESULT="print("+a+")";:} 

;         

elstring::=elstring:a unacadena:b           {:RESULT=a+""+b;:}        
        |unacadena:a                        {:RESULT=a;:}     
    ;

unacadena::= unacadena:a MAS unacadena:b        {:RESULT=a+" , "+b;:}    
        |ID:a                                   {:RESULT=a;:}
        |CADENA:a                               {:RESULT=a;:}

    ;

//--------------------------Sentencias IF-------------------------------------> 
ifif::=unif:a unelse:b    {:RESULT=a+""+b;:} 
    |unif:a               {:RESULT=a;:}
;

unif::= IF  PARENTESIS_A operadores:a PARENTESIS_C   LLAVE_A lista_Inst:b LLAVE_C {:RESULT="if "+a+":\n"+indent(b.toString(), 1);:}

    ;  


unelse::=unelse:a elsee:b   {:RESULT=a+""+b;:}
        |elsee:a            {:RESULT=a;:}  
    ;

elsee::=ELSE IF  PARENTESIS_A operadores:a PARENTESIS_C  LLAVE_A lista_Inst:b LLAVE_C {:RESULT="elif "+a+":\n"+indent(b.toString(), 1);:}
;

//--------------------------OPERADORES  DE RELACION-------------------------------------> 

operadores::=operadores:a logico:b operadores:c           {:RESULT=a+" "+b+" "+c;:}
        |relacion:a                                           {:RESULT=a;:}
        ;

relacion::= relacion:a MAYOR relacion:b     {: RESULT = a + ">" + b; :}
        |relacion:a MENOR relacion:b        {: RESULT = a + "<" + b; :}
        |relacion:a M_IGUAL relacion:b      {: RESULT = a + ">=" + b; :}
        |relacion:a ENOR_IGUAL relacion:b   {: RESULT = a + "<=" + b; :}
        |relacion:a IGUALIGUAL relacion:b   {: RESULT = a + "==" + b; :}
        |relacion:a DIFERENTE relacion:b    {: RESULT = a + "!=" + b; :}
        |relacion:a MENOS relacion:b         {: RESULT = a + " - " + b; :}
        |relacion:a POR relacion:b            {: RESULT = a + " *" + b; :}
        |relacion:a DIV relacion:b            {: RESULT = a + " / " + b; :}
        |relacion:a MAS relacion:b            {: RESULT = a + " + " + b; :}
        |NOT  relacion:b                            {:RESULT="not"+b;:}  
        |ENTERO:a                           {:RESULT=a;:}       
        |CADENA:a                            {:RESULT=a;:}    
        |DECIMAL:a                           {:RESULT=a;:}     
        |ID:a                                {:RESULT=a;:}  
        |TRUE:a                              {:RESULT=a;:}
        |FALSE:a                             {:RESULT=a;:}   
        |CHARI relacion:a CHARI                       {:RESULT="'"+a+"'";:}
       
        
    ;
//--------------------------OPERADORES  LOGICOS-------------------------------------> 
logico::=AND                              {:RESULT="and";:}                
        |OR                               {:RESULT="or";:}
        |NOT                              {:RESULT="not";:}    
    ;

//-----------------------------WHILE----------------------------------> 

unwhile::=WHILE PARENTESIS_A operadores:a PARENTESIS_C LLAVE_A lista_Inst:b LLAVE_C {:RESULT="while "+a+":\n"+indent(b.toString(), 1);:}
        ;

//-----------------------------SWITCH----------------------------------> 
unswitch::=SWITCH PARENTESIS_A operadores:c PARENTESIS_C LLAVE_A uncaso:a LLAVE_C    
{:RESULT="def switch("+c+"):\n switcher = {\n"+a+"\n}";:} 
    ;


uncaso::=uncaso:a otrocaso:b            {:RESULT=a+""+indent(b.toString(), 1);:}
        |otrocaso:a                     {:RESULT=indent(a.toString(), 1);:}     
    ;



otrocaso::= CASE operadores:a DOSP lista_Inst:b                       {:RESULT=a+": "+b.toString().trim()+",";:}
        | DEFAULT DOSP lista_Inst:b                           {:RESULT="n:"+b.toString().trim()+",";:}                                            
       
    ;



//-----------------------------DO---------------------------------->

undo::=  DO LLAVE_A lista_Inst:a  LLAVE_C WHILE PARENTESIS_A operadores:b PARENTESIS_C PUNTO_COMA     
           {:RESULT="while True:\n"+indent(a.toString(), 1)+"\n       if ("+b+"):\n       break";:} 
        ;

//------------------------------FOR------------------------------>
unfor::= FOR PARENTESIS_A unosfor:a PARENTESIS_C LLAVE_A lista_Inst:b LLAVE_C     
       {:RESULT="for "+a+""+indent(b.toString(), 1);:} 
    ;

unosfor::= datofor:b relacionFor:c unaexpmasfor:a
          {:RESULT= a+" in range("+b+","+c+"):\n ";:}
    ;

datofor::= INT ID IGUAL ENTERO:a PUNTO_COMA
            {:RESULT=a;:}
       
    ;

relacionFor::= ID MAYOR ENTERO:a  PUNTO_COMA     {:RESULT=a;:}
        |ID MENOR ENTERO:a   PUNTO_COMA          {:RESULT=a;:}
        |ID M_IGUAL ENTERO:a   PUNTO_COMA        {:RESULT=a;:}
        |ID ENOR_IGUAL ENTERO:a PUNTO_COMA       {:RESULT=a;:}

    ;

unaexpmasfor::=ID:a MASMAS      {:RESULT=a;:}     
        |ID:a MENOSMENOS        {:RESULT=a;:}     
        ;


//------------------------------------------------------------>
//------------------------------------------------------------>

//--------------------------COMIENZO DE LAS GRAFICAS ---------------------------------->

//---------------------------DEFINICION DE GLOBALES--------------------------------->

globo::=VOID GLOBALES  PARENTESIS_A  PARENTESIS_C LLAVE_A unglobo LLAVE_C   {:System.out.println("void globales");:}
;

unglobo::= unglobo otroglobo
        |otroglobo
;

otroglobo::= STRING ID:a IGUAL CADENA:b PUNTO_COMA       {: funciones.maps.Globales_tabla.put(a.toLowerCase(), b);:}
            |DOUBLE ID:a IGUAL DECIMAL:b PUNTO_COMA        {: funciones.maps.Globales_tabla.put(a.toLowerCase(), b);:}
            |DOUBLE ID:a IGUAL respuestaglo:b PUNTO_COMA    {: funciones.maps.Globales_tabla.put(a.toLowerCase(), b);:}
            |STRING ID:a IGUAL respuestaglo:b PUNTO_COMA    {: funciones.maps.Globales_tabla.put(a.toLowerCase(), b);:}
;



datoglo::=STRING:a    {:RESULT=a;:}
        |DOUBLE:a    {:RESULT=a;:}
        ;
 
respuestaglo::= DOLAR  LLAVE_A dentrollaveglo:a LLAVE_C     {:RESULT=a;:}
    ;

dentrollaveglo::=NUEVOVALOR COMA CADENA:a COMA CADENA:b   {:Object w=datos(a,b);RESULT=w;:}
    ;


//---------------------------BARRAS GRAFICA-------------------------------->

unabarra::=VOID BARRAS PARENTESIS_A  PARENTESIS_C LLAVE_A otrabarra LLAVE_C 
{:
    gb.Graficar(titulo,titulox,tituloy,ValuesX,Values);
   titulo="";
    ValuesX.clear();
    Values.clear();

:}
|VOID PIE PARENTESIS_A  PARENTESIS_C LLAVE_A otrabarra LLAVE_C 
{:
    gP.Graficar(titulo, ValuesX, Values);
   titulo="";
    ValuesX.clear();
    Values.clear();

:}
;

otrabarra::=lagrafa otrabarra  
            |lagrafa
            ;


lagrafa::=STRING TITULO IGUAL buscardato:a PUNTO_COMA                         {:titulo=(String)a;:}                         
        |STRING CORCHETE_A CORCHETE_C EJEX IGUAL LLAVE_A ejexdatos LLAVE_C  PUNTO_COMA
        |DOUBLE CORCHETE_A CORCHETE_C VALORES IGUAL LLAVE_A valores LLAVE_C  PUNTO_COMA
        |STRING TITULOY  IGUAL buscardato:a PUNTO_COMA                  {:tituloy=(String)a; :}
        |STRING TITULOX IGUAL buscardato:a PUNTO_COMA                     {:titulox=(String)a;:}
        ;

ejexdatos::= eldato ejexdatos
            |eldato
        ;

buscardato::= ID:a      {: Object w=datosejex(a.toLowerCase());RESULT=w;:}
        |CADENA:a         {:String w = a.replace("\"", "");RESULT=w;:}
        |respuestaglo:a        {:RESULT=a;:}
        
;

eldato::=CADENA:a    {:ValuesX.add((String)a); :}
        |COMA
        |ID:a          {: Object w=datosejex(a);ValuesX.add((String)w);:}
        |DECIMAL
        |respuestaglo:a        {:ValuesX.add((String)a); :}

;

valores::=otrovalor valores
        |otrovalor
    ;

otrovalor::=ID:a                                      

                        {:
                            double w = 0.0;    
                            w = Double.parseDouble(datosejex(a.toLowerCase()).toString());                            
                           Values.add((Double)w);
                        :}
            |DECIMAL:e
{:
                            double w = 0.0;    
                            w = Double.parseDouble(e);                            
                           Values.add((Double)w);
                        :}
            |COMA                                   
            |DOLAR  LLAVE_A dentrootrovalor LLAVE_C 
            ;

dentrootrovalor::=NUEVOVALOR COMA CADENA:a COMA CADENA:b   


{:
    double w = 0.0;    
    w = Double.parseDouble(datos(a, b).toString());    
   Values.add((Double)w);
:}
    ;


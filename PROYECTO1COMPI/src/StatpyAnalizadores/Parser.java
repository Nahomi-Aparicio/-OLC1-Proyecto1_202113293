
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package StatpyAnalizadores;

import java_cup.runtime.*;
import Graficas.GraficarBarras;
import Graficas.GraficaPie;
import java.util.ArrayList;
import java.util.Map;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\172\000\002\002\004\000\002\002\011\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\005\003\000\002\007" +
    "\007\000\002\007\005\000\002\007\006\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\017\005\000\002" +
    "\017\005\000\002\006\005\000\002\006\004\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\005\000\002" +
    "\024\007\000\002\025\004\000\002\025\003\000\002\032" +
    "\005\000\002\032\003\000\002\032\003\000\002\020\004" +
    "\000\002\020\003\000\002\021\011\000\002\022\004\000" +
    "\002\022\003\000\002\023\012\000\002\026\005\000\002" +
    "\026\003\000\002\027\005\000\002\027\005\000\002\027" +
    "\005\000\002\027\005\000\002\027\005\000\002\027\005" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\031\011\000\002\011" +
    "\011\000\002\012\004\000\002\012\003\000\002\013\006" +
    "\000\002\013\007\000\002\013\003\000\002\013\004\000" +
    "\002\014\005\000\002\015\004\000\002\016\013\000\002" +
    "\033\011\000\002\035\005\000\002\034\007\000\002\036" +
    "\006\000\002\036\006\000\002\036\006\000\002\036\006" +
    "\000\002\037\004\000\002\037\004\000\002\041\011\000" +
    "\002\042\004\000\002\042\003\000\002\043\007\000\002" +
    "\043\007\000\002\043\007\000\002\043\007\000\002\044" +
    "\003\000\002\044\003\000\002\045\006\000\002\046\007" +
    "\000\002\047\011\000\002\047\011\000\002\050\004\000" +
    "\002\050\003\000\002\051\007\000\002\051\013\000\002" +
    "\051\013\000\002\051\007\000\002\051\007\000\002\053" +
    "\004\000\002\053\003\000\002\040\003\000\002\040\003" +
    "\000\002\052\003\000\002\052\003\000\002\052\003\000" +
    "\002\052\003\000\002\052\003\000\002\055\004\000\002" +
    "\055\003\000\002\054\003\000\002\054\003\000\002\054" +
    "\003\000\002\054\006\000\002\056\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011a\000\004\035\004\001\002\000\004\043\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\005\010\001\002\000\004\006\011\001\002\000" +
    "\004\007\012\001\002\000\036\035\043\036\016\037\047" +
    "\040\020\041\035\042\031\044\025\050\023\052\042\053" +
    "\017\054\015\057\030\060\045\066\027\001\002\000\046" +
    "\010\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5\041\ufff5\042" +
    "\ufff5\044\ufff5\050\ufff5\051\ufff5\052\ufff5\053\ufff5\054\ufff5" +
    "\055\ufff5\056\ufff5\057\ufff5\060\ufff5\066\ufff5\001\002\000" +
    "\046\010\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3" +
    "\042\ufff3\044\ufff3\050\ufff3\051\ufff3\052\ufff3\053\ufff3\054" +
    "\ufff3\055\ufff3\056\ufff3\057\ufff3\060\ufff3\066\ufff3\001\002" +
    "\000\004\005\u0113\001\002\000\004\066\uffef\001\002\000" +
    "\004\005\u010d\001\002\000\004\066\uffed\001\002\000\046" +
    "\010\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb\042" +
    "\ufffb\044\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb\054\ufffb" +
    "\055\ufffb\056\ufffb\057\ufffb\060\ufffb\066\ufffb\001\002\000" +
    "\046\010\ufffe\035\043\036\016\037\047\040\020\041\035" +
    "\042\031\044\025\050\023\051\ufffe\052\042\053\017\054" +
    "\015\055\ufffe\056\ufffe\057\030\060\045\066\027\001\002" +
    "\000\004\005\370\001\002\000\046\010\ufff6\035\ufff6\036" +
    "\ufff6\037\ufff6\040\ufff6\041\ufff6\042\ufff6\044\ufff6\050\ufff6" +
    "\051\ufff6\052\ufff6\053\ufff6\054\ufff6\055\ufff6\056\ufff6\057" +
    "\ufff6\060\ufff6\066\ufff6\001\002\000\004\005\362\001\002" +
    "\000\046\010\ufff4\035\ufff4\036\ufff4\037\ufff4\040\ufff4\041" +
    "\ufff4\042\ufff4\044\ufff4\050\ufff4\051\ufff4\052\ufff4\053\ufff4" +
    "\054\ufff4\055\ufff4\056\ufff4\057\ufff4\060\ufff4\066\ufff4\001" +
    "\002\000\010\017\355\045\354\046\353\001\002\000\004" +
    "\007\343\001\002\000\004\066\uffeb\001\002\000\046\010" +
    "\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa\042\ufffa" +
    "\044\ufffa\050\ufffa\051\ufffa\052\ufffa\053\ufffa\054\ufffa\055" +
    "\ufffa\056\ufffa\057\ufffa\060\ufffa\066\ufffa\001\002\000\046" +
    "\010\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc\042" +
    "\ufffc\044\ufffc\050\ufffc\051\ufffc\052\ufffc\053\ufffc\054\ufffc" +
    "\055\ufffc\056\ufffc\057\ufffc\060\ufffc\066\ufffc\001\002\000" +
    "\046\010\ufff9\035\ufff9\036\ufff9\037\ufff9\040\ufff9\041\ufff9" +
    "\042\ufff9\044\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9\054" +
    "\ufff9\055\ufff9\056\ufff9\057\ufff9\060\ufff9\066\ufff9\001\002" +
    "\000\004\066\uffec\001\002\000\004\066\313\001\002\000" +
    "\046\010\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd" +
    "\042\ufffd\044\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd\054" +
    "\ufffd\055\ufffd\056\ufffd\057\ufffd\060\ufffd\066\ufffd\001\002" +
    "\000\050\010\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041" +
    "\uffd4\042\uffd4\044\uffd4\047\251\050\uffd4\051\uffd4\052\uffd4" +
    "\053\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4\060\uffd4\066" +
    "\uffd4\001\002\000\046\010\ufff7\035\ufff7\036\ufff7\037\ufff7" +
    "\040\ufff7\041\ufff7\042\ufff7\044\ufff7\050\ufff7\051\ufff7\052" +
    "\ufff7\053\ufff7\054\ufff7\055\ufff7\056\ufff7\057\ufff7\060\ufff7" +
    "\066\ufff7\001\002\000\004\005\213\001\002\000\010\065" +
    "\052\071\051\072\053\001\002\000\046\010\ufff8\035\ufff8" +
    "\036\ufff8\037\ufff8\040\ufff8\041\ufff8\042\ufff8\044\ufff8\050" +
    "\ufff8\051\ufff8\052\ufff8\053\ufff8\054\ufff8\055\ufff8\056\ufff8" +
    "\057\ufff8\060\ufff8\066\ufff8\001\002\000\004\066\uffea\001" +
    "\002\000\004\010\050\001\002\000\004\066\uffee\001\002" +
    "\000\004\002\000\001\002\000\004\005\206\001\002\000" +
    "\004\005\161\001\002\000\004\005\054\001\002\000\004" +
    "\006\055\001\002\000\004\007\056\001\002\000\006\037" +
    "\060\042\061\001\002\000\004\010\160\001\002\000\004" +
    "\014\132\001\002\000\012\014\067\073\065\074\066\076" +
    "\064\001\002\000\010\010\uff9d\037\060\042\061\001\002" +
    "\000\004\010\uff9e\001\002\000\004\017\127\001\002\000" +
    "\004\017\124\001\002\000\004\017\117\001\002\000\004" +
    "\015\070\001\002\000\004\075\071\001\002\000\004\017" +
    "\072\001\002\000\004\007\073\001\002\000\014\013\074" +
    "\016\076\061\101\066\075\067\102\001\002\000\016\010" +
    "\uff92\013\uff92\016\uff92\061\uff92\066\uff92\067\uff92\001\002" +
    "\000\016\010\uff91\013\uff91\016\uff91\061\uff91\066\uff91\067" +
    "\uff91\001\002\000\004\007\107\001\002\000\016\010\uff8f" +
    "\013\uff8f\016\uff8f\061\uff8f\066\uff8f\067\uff8f\001\002\000" +
    "\016\010\uff96\013\074\016\076\061\101\066\075\067\102" +
    "\001\002\000\016\010\uff90\013\uff90\016\uff90\061\uff90\066" +
    "\uff90\067\uff90\001\002\000\016\010\uff93\013\uff93\016\uff93" +
    "\061\uff93\066\uff93\067\uff93\001\002\000\004\010\104\001" +
    "\002\000\004\011\105\001\002\000\010\010\uff9b\037\uff9b" +
    "\042\uff9b\001\002\000\004\010\uff97\001\002\000\004\070" +
    "\111\001\002\000\004\010\116\001\002\000\004\013\112" +
    "\001\002\000\004\067\113\001\002\000\004\013\114\001" +
    "\002\000\004\067\115\001\002\000\004\010\uffa1\001\002" +
    "\000\020\010\uffa2\011\uffa2\013\uffa2\016\uffa2\061\uffa2\066" +
    "\uffa2\067\uffa2\001\002\000\006\066\120\067\122\001\002" +
    "\000\004\011\uff95\001\002\000\004\011\123\001\002\000" +
    "\004\011\uff94\001\002\000\010\010\uff98\037\uff98\042\uff98" +
    "\001\002\000\006\066\120\067\122\001\002\000\004\011" +
    "\126\001\002\000\010\010\uff99\037\uff99\042\uff99\001\002" +
    "\000\006\066\120\067\122\001\002\000\004\011\131\001" +
    "\002\000\010\010\uff9c\037\uff9c\042\uff9c\001\002\000\004" +
    "\015\133\001\002\000\004\077\134\001\002\000\004\017" +
    "\135\001\002\000\004\007\136\001\002\000\012\013\137" +
    "\016\141\061\143\066\140\001\002\000\014\010\uff8a\013" +
    "\uff8a\016\uff8a\061\uff8a\066\uff8a\001\002\000\014\010\uff8c" +
    "\013\uff8c\016\uff8c\061\uff8c\066\uff8c\001\002\000\004\007" +
    "\150\001\002\000\004\010\146\001\002\000\014\010\uff8b" +
    "\013\uff8b\016\uff8b\061\uff8b\066\uff8b\001\002\000\014\010" +
    "\uff8d\013\137\016\141\061\143\066\140\001\002\000\004" +
    "\010\uff8e\001\002\000\004\011\147\001\002\000\010\010" +
    "\uff9a\037\uff9a\042\uff9a\001\002\000\004\070\152\001\002" +
    "\000\004\010\157\001\002\000\004\013\153\001\002\000" +
    "\004\067\154\001\002\000\004\013\155\001\002\000\004" +
    "\067\156\001\002\000\004\010\uff88\001\002\000\014\010" +
    "\uff89\013\uff89\016\uff89\061\uff89\066\uff89\001\002\000\046" +
    "\010\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f\042" +
    "\uff9f\044\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f\054\uff9f" +
    "\055\uff9f\056\uff9f\057\uff9f\060\uff9f\066\uff9f\001\002\000" +
    "\004\006\162\001\002\000\004\007\163\001\002\000\006" +
    "\037\166\042\164\001\002\000\004\066\200\001\002\000" +
    "\010\010\177\037\166\042\164\001\002\000\004\066\170" +
    "\001\002\000\010\010\uffa9\037\uffa9\042\uffa9\001\002\000" +
    "\004\017\171\001\002\000\006\016\076\061\173\001\002" +
    "\000\004\011\175\001\002\000\004\011\174\001\002\000" +
    "\010\010\uffa7\037\uffa7\042\uffa7\001\002\000\010\010\uffa6" +
    "\037\uffa6\042\uffa6\001\002\000\010\010\uffaa\037\uffaa\042" +
    "\uffaa\001\002\000\046\010\uffab\035\uffab\036\uffab\037\uffab" +
    "\040\uffab\041\uffab\042\uffab\044\uffab\050\uffab\051\uffab\052" +
    "\uffab\053\uffab\054\uffab\055\uffab\056\uffab\057\uffab\060\uffab" +
    "\066\uffab\001\002\000\004\017\201\001\002\000\006\016" +
    "\076\067\203\001\002\000\004\011\205\001\002\000\004" +
    "\011\204\001\002\000\010\010\uffa8\037\uffa8\042\uffa8\001" +
    "\002\000\010\010\uffa5\037\uffa5\042\uffa5\001\002\000\004" +
    "\006\207\001\002\000\004\007\210\001\002\000\006\037" +
    "\060\042\061\001\002\000\004\010\212\001\002\000\046" +
    "\010\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0\042" +
    "\uffa0\044\uffa0\050\uffa0\051\uffa0\052\uffa0\053\uffa0\054\uffa0" +
    "\055\uffa0\056\uffa0\057\uffa0\060\uffa0\066\uffa0\001\002\000" +
    "\004\036\216\001\002\000\004\006\245\001\002\000\004" +
    "\066\223\001\002\000\004\066\217\001\002\000\004\017" +
    "\220\001\002\000\004\004\221\001\002\000\004\011\222" +
    "\001\002\000\004\066\uffb2\001\002\000\012\024\233\025" +
    "\232\026\234\027\231\001\002\000\004\066\225\001\002" +
    "\000\006\045\230\046\227\001\002\000\004\006\uffb3\001" +
    "\002\000\004\006\uffac\001\002\000\004\006\uffad\001\002" +
    "\000\004\004\243\001\002\000\004\004\241\001\002\000" +
    "\004\004\237\001\002\000\004\004\235\001\002\000\004" +
    "\011\236\001\002\000\004\066\uffaf\001\002\000\004\011" +
    "\240\001\002\000\004\066\uffb1\001\002\000\004\011\242" +
    "\001\002\000\004\066\uffb0\001\002\000\004\011\244\001" +
    "\002\000\004\066\uffae\001\002\000\004\007\246\001\002" +
    "\000\036\035\043\036\016\037\047\040\020\041\035\042" +
    "\031\044\025\050\023\052\042\053\017\054\015\057\030" +
    "\060\045\066\027\001\002\000\004\010\250\001\002\000" +
    "\046\010\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4" +
    "\042\uffb4\044\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4\054" +
    "\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4\066\uffb4\001\002" +
    "\000\004\044\255\001\002\000\050\010\uffd5\035\uffd5\036" +
    "\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\044\uffd5\047\251" +
    "\050\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5\056" +
    "\uffd5\057\uffd5\060\uffd5\066\uffd5\001\002\000\050\010\uffd1" +
    "\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\044" +
    "\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1" +
    "\055\uffd1\056\uffd1\057\uffd1\060\uffd1\066\uffd1\001\002\000" +
    "\050\010\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2" +
    "\042\uffd2\044\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\053" +
    "\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2\060\uffd2\066\uffd2" +
    "\001\002\000\004\005\256\001\002\000\014\004\264\061" +
    "\263\062\262\066\257\067\265\001\002\000\026\006\uffc4" +
    "\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032" +
    "\uffc4\033\uffc4\034\uffc4\001\002\000\012\006\304\032\303" +
    "\033\306\034\302\001\002\000\026\006\uffce\024\272\025" +
    "\271\026\273\027\270\030\266\031\267\032\uffce\033\uffce" +
    "\034\uffce\001\002\000\026\006\uffc3\024\uffc3\025\uffc3\026" +
    "\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3" +
    "\001\002\000\026\006\uffc5\024\uffc5\025\uffc5\026\uffc5\027" +
    "\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\001\002" +
    "\000\026\006\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030" +
    "\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\001\002\000\026" +
    "\006\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031" +
    "\uffc6\032\uffc6\033\uffc6\034\uffc6\001\002\000\014\004\264" +
    "\061\263\062\262\066\257\067\265\001\002\000\014\004" +
    "\264\061\263\062\262\066\257\067\265\001\002\000\014" +
    "\004\264\061\263\062\262\066\257\067\265\001\002\000" +
    "\014\004\264\061\263\062\262\066\257\067\265\001\002" +
    "\000\014\004\264\061\263\062\262\066\257\067\265\001" +
    "\002\000\014\004\264\061\263\062\262\066\257\067\265" +
    "\001\002\000\026\006\uffcb\024\uffcb\025\uffcb\026\uffcb\027" +
    "\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\001\002" +
    "\000\026\006\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030" +
    "\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\001\002\000\026" +
    "\006\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031" +
    "\uffcc\032\uffcc\033\uffcc\034\uffcc\001\002\000\026\006\uffca" +
    "\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032" +
    "\uffca\033\uffca\034\uffca\001\002\000\026\006\uffc8\024\uffc8" +
    "\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033" +
    "\uffc8\034\uffc8\001\002\000\026\006\uffc9\024\uffc9\025\uffc9" +
    "\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034" +
    "\uffc9\001\002\000\014\004\uffc0\061\uffc0\062\uffc0\066\uffc0" +
    "\067\uffc0\001\002\000\014\004\uffc2\061\uffc2\062\uffc2\066" +
    "\uffc2\067\uffc2\001\002\000\004\007\310\001\002\000\014" +
    "\004\264\061\263\062\262\066\257\067\265\001\002\000" +
    "\014\004\uffc1\061\uffc1\062\uffc1\066\uffc1\067\uffc1\001\002" +
    "\000\012\006\uffcf\032\303\033\306\034\302\001\002\000" +
    "\036\035\043\036\016\037\047\040\020\041\035\042\031" +
    "\044\025\050\023\052\042\053\017\054\015\057\030\060" +
    "\045\066\027\001\002\000\004\010\312\001\002\000\050" +
    "\010\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042" +
    "\uffd0\044\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0" +
    "\054\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0\066\uffd0\001" +
    "\002\000\006\011\314\017\315\001\002\000\046\010\ufff1" +
    "\035\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1\042\ufff1\044" +
    "\ufff1\050\ufff1\051\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1" +
    "\056\ufff1\057\ufff1\060\ufff1\066\ufff1\001\002\000\022\004" +
    "\321\021\320\061\317\062\322\063\323\064\326\066\324" +
    "\067\316\001\002\000\020\006\uffe1\011\uffe1\012\uffe1\020" +
    "\uffe1\021\uffe1\022\uffe1\023\uffe1\001\002\000\020\006\uffe0" +
    "\011\uffe0\012\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\001" +
    "\002\000\004\004\342\001\002\000\020\006\uffe2\011\uffe2" +
    "\012\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\001\002\000" +
    "\020\006\uffde\011\uffde\012\uffde\020\uffde\021\uffde\022\uffde" +
    "\023\uffde\001\002\000\020\006\uffdd\011\uffdd\012\uffdd\020" +
    "\uffdd\021\uffdd\022\uffdd\023\uffdd\001\002\000\020\006\uffdf" +
    "\011\uffdf\012\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\001" +
    "\002\000\014\011\332\020\331\021\333\022\335\023\334" +
    "\001\002\000\004\066\327\001\002\000\004\064\330\001" +
    "\002\000\020\006\uffdc\011\uffdc\012\uffdc\020\uffdc\021\uffdc" +
    "\022\uffdc\023\uffdc\001\002\000\022\004\321\021\320\061" +
    "\317\062\322\063\323\064\326\066\324\067\316\001\002" +
    "\000\046\010\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041" +
    "\ufff2\042\ufff2\044\ufff2\050\ufff2\051\ufff2\052\ufff2\053\ufff2" +
    "\054\ufff2\055\ufff2\056\ufff2\057\ufff2\060\ufff2\066\ufff2\001" +
    "\002\000\022\004\321\021\320\061\317\062\322\063\323" +
    "\064\326\066\324\067\316\001\002\000\022\004\321\021" +
    "\320\061\317\062\322\063\323\064\326\066\324\067\316" +
    "\001\002\000\022\004\321\021\320\061\317\062\322\063" +
    "\323\064\326\066\324\067\316\001\002\000\020\006\uffe5" +
    "\011\uffe5\012\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\001" +
    "\002\000\020\006\uffe4\011\uffe4\012\uffe4\020\uffe4\021\uffe4" +
    "\022\uffe4\023\uffe4\001\002\000\020\006\uffe7\011\uffe7\012" +
    "\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\001\002\000\020" +
    "\006\uffe3\011\uffe3\012\uffe3\020\uffe3\021\uffe3\022\uffe3\023" +
    "\uffe3\001\002\000\020\006\uffe6\011\uffe6\012\uffe6\020\uffe6" +
    "\021\uffe6\022\uffe6\023\uffe6\001\002\000\036\035\043\036" +
    "\016\037\047\040\020\041\035\042\031\044\025\050\023" +
    "\052\042\053\017\054\015\057\030\060\045\066\027\001" +
    "\002\000\004\010\345\001\002\000\004\053\346\001\002" +
    "\000\004\005\347\001\002\000\014\004\264\061\263\062" +
    "\262\066\257\067\265\001\002\000\012\006\351\032\303" +
    "\033\306\034\302\001\002\000\004\011\352\001\002\000" +
    "\046\010\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5" +
    "\042\uffb5\044\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\054" +
    "\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5\066\uffb5\001\002" +
    "\000\004\011\361\001\002\000\004\011\360\001\002\000" +
    "\022\004\321\021\320\061\317\062\322\063\323\064\326" +
    "\066\324\067\316\001\002\000\014\011\357\020\331\021" +
    "\333\022\335\023\334\001\002\000\046\010\ufff0\035\ufff0" +
    "\036\ufff0\037\ufff0\040\ufff0\041\ufff0\042\ufff0\044\ufff0\050" +
    "\ufff0\051\ufff0\052\ufff0\053\ufff0\054\ufff0\055\ufff0\056\ufff0" +
    "\057\ufff0\060\ufff0\066\ufff0\001\002\000\046\010\uffe9\035" +
    "\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\044\uffe9" +
    "\050\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9\056" +
    "\uffe9\057\uffe9\060\uffe9\066\uffe9\001\002\000\046\010\uffe8" +
    "\035\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\044" +
    "\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8" +
    "\056\uffe8\057\uffe8\060\uffe8\066\uffe8\001\002\000\014\004" +
    "\264\061\263\062\262\066\257\067\265\001\002\000\012" +
    "\006\364\032\303\033\306\034\302\001\002\000\004\007" +
    "\365\001\002\000\036\035\043\036\016\037\047\040\020" +
    "\041\035\042\031\044\025\050\023\052\042\053\017\054" +
    "\015\057\030\060\045\066\027\001\002\000\004\010\367" +
    "\001\002\000\050\010\uffd3\035\uffd3\036\uffd3\037\uffd3\040" +
    "\uffd3\041\uffd3\042\uffd3\044\uffd3\047\uffd3\050\uffd3\051\uffd3" +
    "\052\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3\057\uffd3\060" +
    "\uffd3\066\uffd3\001\002\000\022\004\321\021\320\061\317" +
    "\062\322\063\323\064\326\066\324\067\316\001\002\000" +
    "\014\006\372\020\331\021\333\022\335\023\334\001\002" +
    "\000\004\007\373\001\002\000\006\055\375\056\u0100\001" +
    "\002\000\010\010\u010a\055\375\056\u0100\001\002\000\004" +
    "\012\u0108\001\002\000\012\010\uffb9\051\u0104\055\uffb9\056" +
    "\uffb9\001\002\000\010\010\uffbc\055\uffbc\056\uffbc\001\002" +
    "\000\022\004\321\021\320\061\317\062\322\063\323\064" +
    "\326\066\324\067\316\001\002\000\014\012\u0102\020\331" +
    "\021\333\022\335\023\334\001\002\000\036\035\043\036" +
    "\016\037\047\040\020\041\035\042\031\044\025\050\023" +
    "\052\042\053\017\054\015\057\030\060\045\066\027\001" +
    "\002\000\012\010\uffbb\051\u0104\055\uffbb\056\uffbb\001\002" +
    "\000\004\011\u0106\001\002\000\010\010\uffba\055\uffba\056" +
    "\uffba\001\002\000\010\010\uffb6\055\uffb6\056\uffb6\001\002" +
    "\000\010\010\uffb8\055\uffb8\056\uffb8\001\002\000\036\035" +
    "\043\036\016\037\047\040\020\041\035\042\031\044\025" +
    "\050\023\052\042\053\017\054\015\057\030\060\045\066" +
    "\027\001\002\000\012\010\uffb7\051\uffb7\055\uffb7\056\uffb7" +
    "\001\002\000\046\010\uffbe\035\uffbe\036\uffbe\037\uffbe\040" +
    "\uffbe\041\uffbe\042\uffbe\044\uffbe\050\uffbe\051\uffbe\052\uffbe" +
    "\053\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe\066" +
    "\uffbe\001\002\000\010\010\uffbd\055\uffbd\056\uffbd\001\002" +
    "\000\012\010\uffff\051\uffff\055\uffff\056\uffff\001\002\000" +
    "\014\004\264\061\263\062\262\066\257\067\265\001\002" +
    "\000\012\006\u010f\032\303\033\306\034\302\001\002\000" +
    "\004\007\u0110\001\002\000\036\035\043\036\016\037\047" +
    "\040\020\041\035\042\031\044\025\050\023\052\042\053" +
    "\017\054\015\057\030\060\045\066\027\001\002\000\004" +
    "\010\u0112\001\002\000\046\010\uffbf\035\uffbf\036\uffbf\037" +
    "\uffbf\040\uffbf\041\uffbf\042\uffbf\044\uffbf\050\uffbf\051\uffbf" +
    "\052\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf\060" +
    "\uffbf\066\uffbf\001\002\000\006\066\u0114\067\u0117\001\002" +
    "\000\012\006\uffd7\020\uffd7\066\uffd7\067\uffd7\001\002\000" +
    "\012\006\uffd9\020\u011b\066\uffd9\067\uffd9\001\002\000\010" +
    "\006\u0119\066\u0114\067\u0117\001\002\000\012\006\uffd6\020" +
    "\uffd6\066\uffd6\067\uffd6\001\002\000\012\006\uffda\020\u011b" +
    "\066\uffda\067\uffda\001\002\000\004\011\u011a\001\002\000" +
    "\046\010\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb" +
    "\042\uffdb\044\uffdb\050\uffdb\051\uffdb\052\uffdb\053\uffdb\054" +
    "\uffdb\055\uffdb\056\uffdb\057\uffdb\060\uffdb\066\uffdb\001\002" +
    "\000\006\066\u0114\067\u0117\001\002\000\012\006\uffd8\020" +
    "\uffd8\066\uffd8\067\uffd8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011a\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\003\045\004\021\005" +
    "\036\007\013\010\035\011\033\016\043\017\040\020\032" +
    "\021\037\024\020\031\031\033\023\041\012\047\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\003\u010b\004\021\005\036\007\013" +
    "\010\035\011\033\016\043\017\040\020\032\021\037\024" +
    "\020\031\031\033\023\041\012\047\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\022\251\023\252\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\050\056\051\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\050\062\051\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\045\076\052\077\053\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\045\076\052\077\053\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\046\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\040\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\124\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\040\127\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\054\143\055\141\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\054\143\055\144" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\056\150\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\042\164\043" +
    "\166\001\001\000\002\001\001\000\004\043\175\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\045\171\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\045\201\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\050\210\051\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\034\214\035\213\001\001\000\002\001\001" +
    "\000\004\036\223\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\037\225\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\003\246\004\021\005\036\007\013\010\035\011" +
    "\033\016\043\017\040\020\032\021\037\024\020\031\031" +
    "\033\023\041\012\047\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\253\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\026\257\027\260\001\001\000\002\001\001\000\004" +
    "\030\304\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\300\001\001\000\004\027\277\001\001\000\004\027" +
    "\276\001\001\000\004\027\275\001\001\000\004\027\274" +
    "\001\001\000\004\027\273\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\026\306\027\260\001\001" +
    "\000\002\001\001\000\004\030\304\001\001\000\040\003" +
    "\310\004\021\005\036\007\013\010\035\011\033\016\043" +
    "\017\040\020\032\021\037\024\020\031\031\033\023\041" +
    "\012\047\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\324\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\340\001\001\000" +
    "\002\001\001\000\004\006\337\001\001\000\004\006\336" +
    "\001\001\000\004\006\335\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\003\343\004\021\005\036\007\013\010" +
    "\035\011\033\016\043\017\040\020\032\021\037\024\020" +
    "\031\031\033\023\041\012\047\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\026\347" +
    "\027\260\001\001\000\004\030\304\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\355\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\026\362" +
    "\027\260\001\001\000\004\030\304\001\001\000\002\001" +
    "\001\000\040\003\365\004\021\005\036\007\013\010\035" +
    "\011\033\016\043\017\040\020\032\021\037\024\020\031" +
    "\031\033\023\041\012\047\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\370\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\012\373\013\376\014\375" +
    "\001\001\000\006\013\u010a\014\375\001\001\000\002\001" +
    "\001\000\004\015\u0106\001\001\000\002\001\001\000\004" +
    "\006\u0100\001\001\000\002\001\001\000\040\003\u0102\004" +
    "\021\005\036\007\013\010\035\011\033\016\043\017\040" +
    "\020\032\021\037\024\020\031\031\033\023\041\012\047" +
    "\025\001\001\000\004\015\u0104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\003\u0108\004\021\005\036\007\013\010\035\011\033" +
    "\016\043\017\040\020\032\021\037\024\020\031\031\033" +
    "\023\041\012\047\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\026" +
    "\u010d\027\260\001\001\000\004\030\304\001\001\000\002" +
    "\001\001\000\040\003\u0110\004\021\005\036\007\013\010" +
    "\035\011\033\016\043\017\040\020\032\021\037\024\020" +
    "\031\031\033\023\041\012\047\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\025\u0115\032\u0114\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\u0117\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\u011b\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado = ""; 

    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
    }

    //metodo para la tabilacion de los if -------------------------->
    public String indent(String text, int tabs) {
        String[] lines = text.split("\n");
        StringBuilder result = new StringBuilder();
        String tabPrefix = "";
        for (int i = 0; i < tabs; i++) {
            tabPrefix += "\t";
        }
        for (String line : lines) {
            result.append(tabPrefix).append(line).append("\n");
        }
        return result.toString();

    }


public Object datos(String archivos, String variable) {
    System.out.println(archivos);
    System.out.println(variable);

    String archivo = archivos.replace("\"", "");
    String variables = variable.replace("\"", "");
    Object valor = null; // Inicializar valor como un Object

    // Verificar si el archivo externo existe en el mapa
    if (funciones.maps.Archivos_Json.containsKey(archivo)) {
        // Obtener el objeto del archivo externo
        Object archivoJson = funciones.maps.Archivos_Json.get(archivo);

        // Verificar si el objeto es un mapa antes de acceder a sus claves
        if (archivoJson instanceof Map) {
            // Convertir el objeto a un mapa
            Map<?, ?> mapaInterno = (Map<?, ?>) archivoJson;

            // Verificar si la variable interna existe en el mapa
            if (mapaInterno.containsKey(variables)) {
                valor = mapaInterno.get(variables);
                System.out.println("Valor encontrado en el archivo '" + archivo + "': " + valor);
            } else {
                System.out.println("La clave '" + variables + "' no se encontró en el nivel interno del archivo '" + archivo + "'.");
            }
        } else {
            System.out.println("El archivo '" + archivo + "' no contiene un mapa interno válido.");
        }
    } else {
        System.out.println("La clave '" + archivo + "' no se encontró en el nivel externo.");
    }

    return valor;
}





 public Object datosejex(String variable) {
System.out.println("entra datosejex"+variable);
    String variables = variable;
    Object valor = ""; // Inicializar valor como un Object

        if (funciones.maps.Globales_tabla.containsKey(variables)) {
            valor = funciones.maps.Globales_tabla.get(variables);
            System.out.println("Valor encontrado en : " + valor);
        } else {
            System.out.println("La clave " + variables + " no se encontró en el nivel interno en globales.");
        }
    return valor;
}






    public GraficarBarras gb = new GraficarBarras();
public GraficaPie gP = new GraficaPie();
    private ArrayList<Double> Values = new ArrayList<Double>();
    private ArrayList<String> ValuesX = new ArrayList<String>();
    String titulo;
    String titulox;
    String tituloy;



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= VOID MAIN PARENTESIS_A PARENTESIS_C LLAVE_A lista_Inst LLAVE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		funciones.Traduccion.TraduccionPy.add("def main (): \n" +a.toString() + "if__name__ = \"__main__\": \n main()" + "\n");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lista_Inst ::= instruccion lista_Inst 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a +""+ b ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_Inst",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_Inst ::= instruccion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_Inst",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= declaracionVar 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+"\n";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= ifif 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+"\n";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= imprimir 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+"\n";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= unwhile 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+"\n";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= unswitch 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+"\n";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= undo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+"\n";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= unaexpmas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+"\n";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= unfor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+"\n";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= globo 
            {
              Object RESULT =null;
		RESULT="";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= unabarra 
            {
              Object RESULT =null;
		RESULT="";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaracionVar ::= datoint 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionVar",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // datoint ::= vari ID IGUAL Expresion PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=" "+a+"="+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datoint",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // datoint ::= vari ID PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=" "+a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datoint",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // datoint ::= ID IGUAL Expresion PUNTO_COMA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=b+" ="+a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datoint",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // vari ::= INT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vari",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // vari ::= DOUBLE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vari",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // vari ::= CHAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vari",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // vari ::= BOOL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vari",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // vari ::= STRING 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vari",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // vari ::= VAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vari",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // unaexpmas ::= ID MASMAS PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT=a+"++";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaexpmas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // unaexpmas ::= ID MENOSMENOS PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT=a+"--";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaexpmas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Expresion ::= Expresion MENOS Expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " - " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Expresion ::= MENOS ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT="-"+a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Expresion ::= Expresion POR Expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " *" + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Expresion ::= Expresion DIV Expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " / " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Expresion ::= Expresion MAS Expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " + " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Expresion ::= ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Expresion ::= CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Expresion ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Expresion ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Expresion ::= TRUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Expresion ::= FALSE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expresion ::= CHARI ID CHARI 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT="'"+a+"'";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // imprimir ::= CONSOL PARENTESIS_A elstring PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT="print("+a+")";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprimir",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // elstring ::= elstring unacadena 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+""+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elstring",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // elstring ::= unacadena 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elstring",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // unacadena ::= unacadena MAS unacadena 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+" , "+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unacadena",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // unacadena ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unacadena",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // unacadena ::= CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unacadena",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ifif ::= unif unelse 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+""+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifif",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ifif ::= unif 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifif",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // unif ::= IF PARENTESIS_A operadores PARENTESIS_C LLAVE_A lista_Inst LLAVE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT="if "+a+":\n"+indent(b.toString(), 1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unif",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // unelse ::= unelse elsee 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+""+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unelse",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // unelse ::= elsee 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unelse",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // elsee ::= ELSE IF PARENTESIS_A operadores PARENTESIS_C LLAVE_A lista_Inst LLAVE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT="elif "+a+":\n"+indent(b.toString(), 1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elsee",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // operadores ::= operadores logico operadores 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+" "+b+" "+c;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // operadores ::= relacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // relacion ::= relacion MAYOR relacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + ">" + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacion",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // relacion ::= relacion MENOR relacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + "<" + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacion",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // relacion ::= relacion M_IGUAL relacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + ">=" + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacion",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // relacion ::= relacion ENOR_IGUAL relacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + "<=" + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacion",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // relacion ::= relacion IGUALIGUAL relacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + "==" + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacion",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // relacion ::= relacion DIFERENTE relacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + "!=" + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacion",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // relacion ::= ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacion",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // relacion ::= CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacion",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // relacion ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacion",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // relacion ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacion",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // relacion ::= TRUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacion",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // logico ::= AND 
            {
              Object RESULT =null;
		RESULT="and";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logico",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // logico ::= OR 
            {
              Object RESULT =null;
		RESULT="or";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logico",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // logico ::= NOT 
            {
              Object RESULT =null;
		RESULT="not";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logico",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // unwhile ::= WHILE PARENTESIS_A operadores PARENTESIS_C LLAVE_A lista_Inst LLAVE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT="while "+a+":\n"+indent(b.toString(), 1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unwhile",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // unswitch ::= SWITCH PARENTESIS_A Expresion PARENTESIS_C LLAVE_A uncaso LLAVE_C 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT="def switch("+c+"):\n switcher = {\n"+a+"\n}";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unswitch",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // uncaso ::= uncaso otrocaso 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+""+indent(b.toString(), 1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("uncaso",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // uncaso ::= otrocaso 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=indent(a.toString(), 1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("uncaso",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // otrocaso ::= CASE Expresion DOSP lista_Inst 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+": "+b+",";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("otrocaso",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // otrocaso ::= CASE Expresion DOSP lista_Inst unbreak 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=a+": "+b+",";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("otrocaso",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // otrocaso ::= casodefalut 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("otrocaso",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // otrocaso ::= casodefalut unbreak 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("otrocaso",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // casodefalut ::= DEFAULT DOSP lista_Inst 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT="n:"+b+",";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casodefalut",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // unbreak ::= BREAK PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unbreak",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // undo ::= DO LLAVE_A lista_Inst LLAVE_C WHILE PARENTESIS_A operadores PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT="while True:\n"+indent(a.toString(), 1)+"\n       if ("+b+"):\n       break";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("undo",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // unfor ::= FOR PARENTESIS_A unosfor PARENTESIS_C LLAVE_A lista_Inst LLAVE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT="for "+a+""+indent(b.toString(), 1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unfor",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // unosfor ::= datofor relacionFor unaexpmasfor 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= a+" in range("+b+","+c+"):\n ";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unosfor",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // datofor ::= INT ID IGUAL ENTERO PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datofor",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // relacionFor ::= ID MAYOR ENTERO PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacionFor",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // relacionFor ::= ID MENOR ENTERO PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacionFor",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // relacionFor ::= ID M_IGUAL ENTERO PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacionFor",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // relacionFor ::= ID ENOR_IGUAL ENTERO PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacionFor",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // unaexpmasfor ::= ID MASMAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaexpmasfor",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // unaexpmasfor ::= ID MENOSMENOS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaexpmasfor",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // globo ::= VOID GLOBALES PARENTESIS_A PARENTESIS_C LLAVE_A unglobo LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("void globales");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("globo",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // unglobo ::= unglobo otroglobo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unglobo",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // unglobo ::= otroglobo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unglobo",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // otroglobo ::= STRING ID IGUAL CADENA PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 funciones.maps.Globales_tabla.put(a.toLowerCase(), b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("otroglobo",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // otroglobo ::= DOUBLE ID IGUAL DECIMAL PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 funciones.maps.Globales_tabla.put(a.toLowerCase(), b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("otroglobo",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // otroglobo ::= DOUBLE ID IGUAL respuestaglo PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 funciones.maps.Globales_tabla.put(a.toLowerCase(), b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("otroglobo",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // otroglobo ::= STRING ID IGUAL respuestaglo PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 funciones.maps.Globales_tabla.put(a.toLowerCase(), b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("otroglobo",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // datoglo ::= STRING 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datoglo",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // datoglo ::= DOUBLE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datoglo",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // respuestaglo ::= DOLAR LLAVE_A dentrollaveglo LLAVE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("respuestaglo",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // dentrollaveglo ::= NUEVOVALOR COMA CADENA COMA CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Object w=datos(a,b);RESULT=w;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dentrollaveglo",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // unabarra ::= VOID BARRAS PARENTESIS_A PARENTESIS_C LLAVE_A otrabarra LLAVE_C 
            {
              Object RESULT =null;
		
    gb.Graficar(titulo,titulox,tituloy,ValuesX,Values);
   titulo="";
    ValuesX.clear();
    Values.clear();


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unabarra",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // unabarra ::= VOID PIE PARENTESIS_A PARENTESIS_C LLAVE_A otrabarra LLAVE_C 
            {
              Object RESULT =null;
		
    gP.Graficar(titulo, ValuesX, Values);
   titulo="";
    ValuesX.clear();
    Values.clear();


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unabarra",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // otrabarra ::= lagrafa otrabarra 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("otrabarra",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // otrabarra ::= lagrafa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("otrabarra",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // lagrafa ::= STRING TITULO IGUAL buscardato PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		titulo=(String)a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lagrafa",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // lagrafa ::= STRING CORCHETE_A CORCHETE_C EJEX IGUAL LLAVE_A ejexdatos LLAVE_C PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lagrafa",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // lagrafa ::= DOUBLE CORCHETE_A CORCHETE_C VALORES IGUAL LLAVE_A valores LLAVE_C PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lagrafa",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // lagrafa ::= STRING TITULOY IGUAL buscardato PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		titulox=(String)a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lagrafa",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // lagrafa ::= STRING TITULOX IGUAL buscardato PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		tituloy=(String)a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lagrafa",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ejexdatos ::= eldato ejexdatos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ejexdatos",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ejexdatos ::= eldato 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ejexdatos",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // buscardato ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Object w=datosejex(a.toLowerCase());RESULT=w;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("buscardato",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // buscardato ::= CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		String w = a.replace("\"", "");RESULT=w;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("buscardato",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // eldato ::= CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		ValuesX.add((String)a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("eldato",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // eldato ::= COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("eldato",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // eldato ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Object w=datosejex(a);ValuesX.add((String)w);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("eldato",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // eldato ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("eldato",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // eldato ::= respuestaglo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		ValuesX.add((String)a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("eldato",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // valores ::= otrovalor valores 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valores",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // valores ::= otrovalor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valores",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // otrovalor ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            double w = 0.0;    
                            w = Double.parseDouble(datosejex(a.toLowerCase()).toString());                            
                           Values.add((Double)w);
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("otrovalor",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // otrovalor ::= DECIMAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            double w = 0.0;    
                            w = Double.parseDouble(e);                            
                           Values.add((Double)w);
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("otrovalor",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // otrovalor ::= COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("otrovalor",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // otrovalor ::= DOLAR LLAVE_A dentrootrovalor LLAVE_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("otrovalor",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // dentrootrovalor ::= NUEVOVALOR COMA CADENA COMA CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    double w = 0.0;    
    w = Double.parseDouble(datos(a, b).toString());    
   Values.add((Double)w);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dentrootrovalor",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
